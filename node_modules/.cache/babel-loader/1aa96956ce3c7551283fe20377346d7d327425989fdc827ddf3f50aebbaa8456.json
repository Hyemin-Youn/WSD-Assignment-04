{"ast":null,"code":"import MovieCard from \"@/components/MovieCard.vue\";\nimport { fetchPopularMovies } from \"@/api/movies\";\nexport default {\n  name: \"PopularTable\",\n  components: {\n    MovieCard\n  },\n  data() {\n    return {\n      movies: [],\n      // 전체 영화 데이터\n      currentPage: 1,\n      // 현재 페이지\n      totalPages: 1,\n      // 총 페이지 수\n      moviesPerPage: this.calculateMoviesPerPage() // 한 페이지에 표시할 영화 수 (동적)\n    };\n  },\n  computed: {\n    // 현재 페이지에 해당하는 영화 목록 계산\n    paginatedMovies() {\n      const start = (this.currentPage - 1) * this.moviesPerPage;\n      const end = start + this.moviesPerPage;\n      return this.movies.slice(start, end);\n    }\n  },\n  created() {\n    // 컴포넌트 생성 시 영화 데이터 로드 및 resize 이벤트 리스너 추가\n    this.fetchMovies();\n    window.addEventListener(\"resize\", this.handleResize);\n  },\n  beforeUnmount() {\n    // 컴포넌트 파괴 시 이벤트 리스너 제거\n    window.removeEventListener(\"resize\", this.handleResize);\n  },\n  methods: {\n    // TMDB API에서 여러 페이지의 데이터를 가져와 병합\n    async fetchMovies() {\n      try {\n        const totalPagesToFetch = 3; // 가져올 페이지 수\n        let allMovies = [];\n        for (let page = 1; page <= totalPagesToFetch; page++) {\n          const data = await fetchPopularMovies(page);\n          allMovies = [...allMovies, ...data.results];\n        }\n        this.movies = allMovies;\n        this.totalPages = Math.ceil(this.movies.length / this.moviesPerPage);\n      } catch (error) {\n        console.error(\"Error fetching movies:\", error);\n      }\n    },\n    // 페이지 변경\n    changePage(page) {\n      if (page > 0 && page <= this.totalPages) {\n        this.currentPage = page;\n      }\n    },\n    // 화면 크기에 따라 moviesPerPage 계산\n    calculateMoviesPerPage() {\n      if (window.innerWidth <= 480) {\n        return 9; // 모바일: 9개\n      } else if (window.innerWidth <= 768) {\n        return 6; // 태블릿: 6개\n      } else {\n        return 10; // 기본: 10개\n      }\n    },\n    // 화면 크기 변화 감지\n    handleResize() {\n      this.moviesPerPage = this.calculateMoviesPerPage();\n      this.totalPages = Math.ceil(this.movies.length / this.moviesPerPage);\n    }\n  }\n};","map":{"version":3,"names":["MovieCard","fetchPopularMovies","name","components","data","movies","currentPage","totalPages","moviesPerPage","calculateMoviesPerPage","computed","paginatedMovies","start","end","slice","created","fetchMovies","window","addEventListener","handleResize","beforeUnmount","removeEventListener","methods","totalPagesToFetch","allMovies","page","results","Math","ceil","length","error","console","changePage","innerWidth"],"sources":["C:\\Users\\hyemi\\WSD-Assignment-04\\src\\views\\PopularTable.vue"],"sourcesContent":["<template>\r\n  <div class=\"popular\">\r\n    <!-- 영화 리스트 -->\r\n    <div class=\"movie-grid\">\r\n      <MovieCard\nv-for=\"movie in paginatedMovies\"\n:key=\"movie.id\"\n:movie=\"movie\"\n/>\r\n    </div>\r\n\r\n    <!-- 페이지네이션 -->\r\n    <div class=\"pagination\">\r\n      <button\r\n        :disabled=\"currentPage === 1\"\r\n        @click=\"changePage(currentPage - 1)\"\r\n      >\r\n        &lt; 이전\r\n      </button>\r\n      <span>{{ currentPage }} / {{ totalPages }}</span>\r\n      <button\r\n        :disabled=\"currentPage === totalPages\"\r\n        @click=\"changePage(currentPage + 1)\"\r\n      >\r\n        다음 &gt;\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MovieCard from \"@/components/MovieCard.vue\";\r\nimport { fetchPopularMovies } from \"@/api/movies\";\r\n\r\nexport default {\r\n  name: \"PopularTable\",\r\n  components: {\r\n    MovieCard,\r\n  },\r\n  data() {\r\n    return {\r\n      movies: [], // 전체 영화 데이터\r\n      currentPage: 1, // 현재 페이지\r\n      totalPages: 1, // 총 페이지 수\r\n      moviesPerPage: this.calculateMoviesPerPage(), // 한 페이지에 표시할 영화 수 (동적)\r\n    };\r\n  },\r\n  computed: {\r\n    // 현재 페이지에 해당하는 영화 목록 계산\r\n    paginatedMovies() {\r\n      const start = (this.currentPage - 1) * this.moviesPerPage;\r\n      const end = start + this.moviesPerPage;\r\n      return this.movies.slice(start, end);\r\n    },\r\n  },\r\n  created() {\r\n    // 컴포넌트 생성 시 영화 데이터 로드 및 resize 이벤트 리스너 추가\r\n    this.fetchMovies();\r\n    window.addEventListener(\"resize\", this.handleResize);\r\n  },\r\n  beforeUnmount() {\r\n    // 컴포넌트 파괴 시 이벤트 리스너 제거\r\n    window.removeEventListener(\"resize\", this.handleResize);\r\n  },\r\n  methods: {\r\n    // TMDB API에서 여러 페이지의 데이터를 가져와 병합\r\n    async fetchMovies() {\r\n      try {\r\n        const totalPagesToFetch = 3; // 가져올 페이지 수\r\n        let allMovies = [];\r\n\r\n        for (let page = 1; page <= totalPagesToFetch; page++) {\r\n          const data = await fetchPopularMovies(page);\r\n          allMovies = [...allMovies, ...data.results];\r\n        }\r\n\r\n        this.movies = allMovies;\r\n        this.totalPages = Math.ceil(this.movies.length / this.moviesPerPage);\r\n      } catch (error) {\r\n        console.error(\"Error fetching movies:\", error);\r\n      }\r\n    },\r\n    // 페이지 변경\r\n    changePage(page) {\r\n      if (page > 0 && page <= this.totalPages) {\r\n        this.currentPage = page;\r\n      }\r\n    },\r\n    // 화면 크기에 따라 moviesPerPage 계산\r\n    calculateMoviesPerPage() {\r\n      if (window.innerWidth <= 480) {\r\n        return 9; // 모바일: 9개\r\n      } else if (window.innerWidth <= 768) {\r\n        return 6; // 태블릿: 6개\r\n      } else {\r\n        return 10; // 기본: 10개\r\n      }\r\n    },\r\n    // 화면 크기 변화 감지\r\n    handleResize() {\r\n      this.moviesPerPage = this.calculateMoviesPerPage();\r\n      this.totalPages = Math.ceil(this.movies.length / this.moviesPerPage);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 기본 스타일 */\r\n.popular {\r\n  padding-top: 60px; /* 상단 여백 추가 */\r\n  background-color: #000; /* 배경색을 검은색으로 설정 */\r\n  color: #fff; /* 텍스트 흰색 */\r\n  min-height: 100vh; /* 최소 높이 100vh */\r\n}\r\n\r\n.movie-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr); /* 기본: 5열 */\r\n  gap: 10px;\r\n  padding: 10px;\r\n  justify-items: center;\r\n}\r\n\r\n.movie-card {\r\n  width: 130px;\r\n  text-align: center;\r\n}\r\n\r\n.movie-title {\r\n  font-size: 12px;\r\n}\r\n\r\n/* 반응형 스타일 */\r\n@media (max-width: 768px) {\r\n  .movie-grid {\r\n    grid-template-columns: repeat(3, 1fr); /* 태블릿: 3열 */\r\n    gap: 10px;\r\n  }\r\n\r\n  .movie-card {\r\n    width: 90px; /* 카드 크기 축소 */\r\n  }\r\n\r\n  .movie-title {\r\n    font-size: 11px; /* 제목 글씨 크기 축소 */\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .movie-grid {\r\n    grid-template-columns: repeat(3, 1fr); /* 모바일: 3열 */\r\n    gap: 8px;\r\n  }\r\n\r\n  .movie-card {\r\n    width: 70px; /* 카드 크기 더 축소 */\r\n  }\r\n\r\n  .movie-title {\r\n    font-size: 0.5px; /* 제목 글씨 크기 더 축소 */\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"AA+BA,OAAOA,SAAQ,MAAO,4BAA4B;AAClD,SAASC,kBAAiB,QAAS,cAAc;AAEjD,eAAe;EACbC,IAAI,EAAE,cAAc;EACpBC,UAAU,EAAE;IACVH;EACF,CAAC;EACDI,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MAAE;MACZC,WAAW,EAAE,CAAC;MAAE;MAChBC,UAAU,EAAE,CAAC;MAAE;MACfC,aAAa,EAAE,IAAI,CAACC,sBAAsB,CAAC,CAAC,CAAE;IAChD,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,eAAeA,CAAA,EAAG;MAChB,MAAMC,KAAI,GAAI,CAAC,IAAI,CAACN,WAAU,GAAI,CAAC,IAAI,IAAI,CAACE,aAAa;MACzD,MAAMK,GAAE,GAAID,KAAI,GAAI,IAAI,CAACJ,aAAa;MACtC,OAAO,IAAI,CAACH,MAAM,CAACS,KAAK,CAACF,KAAK,EAAEC,GAAG,CAAC;IACtC;EACF,CAAC;EACDE,OAAOA,CAAA,EAAG;IACR;IACA,IAAI,CAACC,WAAW,CAAC,CAAC;IAClBC,MAAM,CAACC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAACC,YAAY,CAAC;EACtD,CAAC;EACDC,aAAaA,CAAA,EAAG;IACd;IACAH,MAAM,CAACI,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAACF,YAAY,CAAC;EACzD,CAAC;EACDG,OAAO,EAAE;IACP;IACA,MAAMN,WAAWA,CAAA,EAAG;MAClB,IAAI;QACF,MAAMO,iBAAgB,GAAI,CAAC,EAAE;QAC7B,IAAIC,SAAQ,GAAI,EAAE;QAElB,KAAK,IAAIC,IAAG,GAAI,CAAC,EAAEA,IAAG,IAAKF,iBAAiB,EAAEE,IAAI,EAAE,EAAE;UACpD,MAAMrB,IAAG,GAAI,MAAMH,kBAAkB,CAACwB,IAAI,CAAC;UAC3CD,SAAQ,GAAI,CAAC,GAAGA,SAAS,EAAE,GAAGpB,IAAI,CAACsB,OAAO,CAAC;QAC7C;QAEA,IAAI,CAACrB,MAAK,GAAImB,SAAS;QACvB,IAAI,CAACjB,UAAS,GAAIoB,IAAI,CAACC,IAAI,CAAC,IAAI,CAACvB,MAAM,CAACwB,MAAK,GAAI,IAAI,CAACrB,aAAa,CAAC;MACtE,EAAE,OAAOsB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IACD;IACAE,UAAUA,CAACP,IAAI,EAAE;MACf,IAAIA,IAAG,GAAI,KAAKA,IAAG,IAAK,IAAI,CAAClB,UAAU,EAAE;QACvC,IAAI,CAACD,WAAU,GAAImB,IAAI;MACzB;IACF,CAAC;IACD;IACAhB,sBAAsBA,CAAA,EAAG;MACvB,IAAIQ,MAAM,CAACgB,UAAS,IAAK,GAAG,EAAE;QAC5B,OAAO,CAAC,EAAE;MACZ,OAAO,IAAIhB,MAAM,CAACgB,UAAS,IAAK,GAAG,EAAE;QACnC,OAAO,CAAC,EAAE;MACZ,OAAO;QACL,OAAO,EAAE,EAAE;MACb;IACF,CAAC;IACD;IACAd,YAAYA,CAAA,EAAG;MACb,IAAI,CAACX,aAAY,GAAI,IAAI,CAACC,sBAAsB,CAAC,CAAC;MAClD,IAAI,CAACF,UAAS,GAAIoB,IAAI,CAACC,IAAI,CAAC,IAAI,CAACvB,MAAM,CAACwB,MAAK,GAAI,IAAI,CAACrB,aAAa,CAAC;IACtE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}