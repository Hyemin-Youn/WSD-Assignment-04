{"ast":null,"code":"import { createRouter, createWebHashHistory } from 'vue-router';\nimport Home from '../views/Home.vue';\nimport SignIn from '../components/sign-in/SignIn.vue';\nimport Wishlist from '../views/WishList.vue';\nimport store from '../store';\nimport MovieDetail from \"@/views/MovieDetail.vue\";\nimport SliderContent from '../components/SliderContent.vue';\nimport Search from \"@/views/Search.vue\";\nimport PopularInfinite from \"@/views/PopularInfinite.vue\";\nimport PopularTable from \"@/views/PopularTable.vue\";\nimport Popular from \"@/components/Popular.vue\";\nconst routes = [{\n  path: '/signin',\n  name: 'SignIn',\n  component: SignIn,\n  meta: {\n    hideNavbar: true\n  } // Navbar를 숨기기 위한 메타 데이터\n}, {\n  path: '/home',\n  name: 'Home',\n  component: Home,\n  meta: {\n    requiresAuth: true\n  }\n}, {\n  path: '/',\n  redirect: '/signin'\n}, {\n  path: \"/movies/:id\",\n  component: MovieDetail\n}, {\n  path: '/wishlist',\n  name: 'Wishlist',\n  component: Wishlist\n}, {\n  path: \"/slider\",\n  name: 'SliderContent',\n  component: SliderContent\n}, {\n  path: \"/popular\",\n  component: Popular,\n  redirect: \"/popular/table\",\n  // 기본적으로 Table View로 리디렉션\n  children: [{\n    path: \"table\",\n    component: PopularTable\n  }, {\n    path: \"infinite\",\n    component: PopularInfinite\n  }]\n}, {\n  path: \"/search\",\n  name: \"Search\",\n  component: Search\n}];\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n});\nrouter.beforeEach((to, from, next) => {\n  const isAuthenticated = store.getters.isAuthenticated;\n  if (to.name === 'SignIn' && isAuthenticated) {\n    next('/home'); // 인증된 사용자가 로그인 페이지로 접근할 때\n  } else {\n    next(); // 나머지 경우는 통과\n  }\n});\nexport default router;","map":{"version":3,"names":["createRouter","createWebHashHistory","Home","SignIn","Wishlist","store","MovieDetail","SliderContent","Search","PopularInfinite","PopularTable","Popular","routes","path","name","component","meta","hideNavbar","requiresAuth","redirect","children","router","history","beforeEach","to","from","next","isAuthenticated","getters"],"sources":["C:/Users/hyemi/WSD-Assignment-04/src/router/index.js"],"sourcesContent":["import { createRouter, createWebHashHistory } from 'vue-router';\r\nimport Home from '../views/Home.vue';\r\nimport SignIn from '../components/sign-in/SignIn.vue';\r\nimport Wishlist from '../views/WishList.vue';\r\nimport store from '../store';\r\nimport MovieDetail from \"@/views/MovieDetail.vue\";\r\nimport SliderContent from '../components/SliderContent.vue';\r\nimport Search from \"@/views/Search.vue\";\r\nimport PopularInfinite from \"@/views/PopularInfinite.vue\";\r\nimport PopularTable from \"@/views/PopularTable.vue\";\r\nimport Popular from \"@/components/Popular.vue\";\r\n\r\n\r\n\r\n\r\nconst routes = [\r\n  { \r\n    path: '/signin', \r\n    name: 'SignIn', \r\n    component: SignIn,\r\n    meta: { hideNavbar: true }, // Navbar를 숨기기 위한 메타 데이터\r\n  },\r\n  { \r\n    path: '/home', \r\n    name: 'Home', \r\n    component: Home,\r\n    meta: { requiresAuth: true },\r\n  },\r\n  { \r\n    path: '/', \r\n    redirect: '/signin',\r\n  },  \r\n  {\r\n    path: \"/movies/:id\",\r\n    component: MovieDetail \r\n  },\r\n  {\r\n    path: '/wishlist',\r\n    name: 'Wishlist',\r\n    component: Wishlist \r\n  },\r\n  {\r\n    path: \"/slider\",\r\n    name: 'SliderContent',\r\n    component: SliderContent, \r\n  },\r\n  {\r\n    path: \"/popular\",\r\n    component: Popular,\r\n    redirect: \"/popular/table\", // 기본적으로 Table View로 리디렉션\r\n    children: [\r\n      {\r\n        path: \"table\",\r\n        component: PopularTable,\r\n      },\r\n      {\r\n        path: \"infinite\",\r\n        component: PopularInfinite,\r\n      },\r\n    ],\r\n  },  \r\n  {\r\n    path: \"/search\",\r\n    name: \"Search\",\r\n    component: Search,\r\n  },\r\n];\r\n\r\nconst router = createRouter({\r\n  history: createWebHashHistory(),\r\n  routes,\r\n});\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n  const isAuthenticated = store.getters.isAuthenticated;\r\n\r\n  if (to.name === 'SignIn' && isAuthenticated) {\r\n    next('/home'); // 인증된 사용자가 로그인 페이지로 접근할 때\r\n  } else {\r\n    next(); // 나머지 경우는 통과\r\n  }\r\n});\r\n\r\nexport default router;\r\n"],"mappings":"AAAA,SAASA,YAAY,EAAEC,oBAAoB,QAAQ,YAAY;AAC/D,OAAOC,IAAI,MAAM,mBAAmB;AACpC,OAAOC,MAAM,MAAM,kCAAkC;AACrD,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,aAAa,MAAM,iCAAiC;AAC3D,OAAOC,MAAM,MAAM,oBAAoB;AACvC,OAAOC,eAAe,MAAM,6BAA6B;AACzD,OAAOC,YAAY,MAAM,0BAA0B;AACnD,OAAOC,OAAO,MAAM,0BAA0B;AAK9C,MAAMC,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEZ,MAAM;EACjBa,IAAI,EAAE;IAAEC,UAAU,EAAE;EAAK,CAAC,CAAE;AAC9B,CAAC,EACD;EACEJ,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEb,IAAI;EACfc,IAAI,EAAE;IAAEE,YAAY,EAAE;EAAK;AAC7B,CAAC,EACD;EACEL,IAAI,EAAE,GAAG;EACTM,QAAQ,EAAE;AACZ,CAAC,EACD;EACEN,IAAI,EAAE,aAAa;EACnBE,SAAS,EAAET;AACb,CAAC,EACD;EACEO,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEX;AACb,CAAC,EACD;EACES,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,eAAe;EACrBC,SAAS,EAAER;AACb,CAAC,EACD;EACEM,IAAI,EAAE,UAAU;EAChBE,SAAS,EAAEJ,OAAO;EAClBQ,QAAQ,EAAE,gBAAgB;EAAE;EAC5BC,QAAQ,EAAE,CACR;IACEP,IAAI,EAAE,OAAO;IACbE,SAAS,EAAEL;EACb,CAAC,EACD;IACEG,IAAI,EAAE,UAAU;IAChBE,SAAS,EAAEN;EACb,CAAC;AAEL,CAAC,EACD;EACEI,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEP;AACb,CAAC,CACF;AAED,MAAMa,MAAM,GAAGrB,YAAY,CAAC;EAC1BsB,OAAO,EAAErB,oBAAoB,CAAC,CAAC;EAC/BW;AACF,CAAC,CAAC;AAEFS,MAAM,CAACE,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpC,MAAMC,eAAe,GAAGtB,KAAK,CAACuB,OAAO,CAACD,eAAe;EAErD,IAAIH,EAAE,CAACV,IAAI,KAAK,QAAQ,IAAIa,eAAe,EAAE;IAC3CD,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;EACjB,CAAC,MAAM;IACLA,IAAI,CAAC,CAAC,CAAC,CAAC;EACV;AACF,CAAC,CAAC;AAEF,eAAeL,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}