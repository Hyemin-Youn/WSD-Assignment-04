{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { createStore } from \"vuex\";\nconst store = createStore({\n  state: {\n    user: JSON.parse(localStorage.getItem(\"user\")) || null,\n    // 사용자 정보\n    isAuthenticated: !!localStorage.getItem(\"user\"),\n    // 인증 상태\n    wishlist: JSON.parse(localStorage.getItem(\"wishlist\")) || [],\n    // 찜 목록\n    recentSearches: JSON.parse(localStorage.getItem(\"recentSearches\")) || [],\n    // 최근 검색어 목록\n    searchResults: JSON.parse(localStorage.getItem(\"searchResults\")) || [] // 검색 결과 저장\n  },\n  mutations: {\n    setUser(state, user) {\n      state.user = user;\n      state.isAuthenticated = !!user;\n      if (user) {\n        localStorage.setItem(\"user\", JSON.stringify(user));\n      } else {\n        localStorage.removeItem(\"user\");\n      }\n    },\n    logout(state) {\n      state.user = null;\n      state.isAuthenticated = false;\n      localStorage.removeItem(\"user\");\n    },\n    TOGGLE_WISHLIST(state, movie) {\n      const existingMovieIndex = state.wishlist.findIndex(item => item.id === movie.id);\n      if (existingMovieIndex === -1) {\n        // 영화가 찜 목록에 없으면 추가\n        state.wishlist.push(movie);\n      } else {\n        // 영화가 찜 목록에 있으면 제거\n        state.wishlist.splice(existingMovieIndex, 1);\n      }\n      localStorage.setItem(\"wishlist\", JSON.stringify(state.wishlist));\n    },\n    ADD_SEARCH_HISTORY(state, query) {\n      if (!state.recentSearches.includes(query)) {\n        state.recentSearches.unshift(query); // 최신 검색어를 목록 맨 앞에 추가\n        if (state.recentSearches.length > 10) {\n          state.recentSearches.pop(); // 최근 검색어는 최대 10개까지만 유지\n        }\n        localStorage.setItem(\"recentSearches\", JSON.stringify(state.recentSearches));\n      }\n    },\n    DELETE_SEARCH_HISTORY(state, index) {\n      state.recentSearches.splice(index, 1); // 해당 인덱스의 검색어 삭제\n      localStorage.setItem(\"recentSearches\", JSON.stringify(state.recentSearches));\n    },\n    SET_SEARCH_RESULTS(state, results) {\n      state.searchResults = results; // 검색 결과 저장\n      localStorage.setItem(\"searchResults\", JSON.stringify(results));\n    }\n  },\n  actions: {\n    toggleWishlist({\n      commit\n    }, movie) {\n      commit(\"TOGGLE_WISHLIST\", movie);\n    },\n    addSearchHistory({\n      commit\n    }, query) {\n      commit(\"ADD_SEARCH_HISTORY\", query);\n    },\n    deleteSearchHistory({\n      commit\n    }, index) {\n      commit(\"DELETE_SEARCH_HISTORY\", index);\n    },\n    setSearchResults({\n      commit\n    }, results) {\n      console.log(\"검색 결과 저장 중:\", results);\n      commit(\"SET_SEARCH_RESULTS\", results);\n    }\n  },\n  getters: {\n    wishlist: state => state.wishlist,\n    // 찜 목록 가져오기\n    isInWishlist: state => id => {\n      return state.wishlist.some(movie => movie.id === id); // 특정 영화가 찜 목록에 있는지 확인\n    },\n    recentSearches: state => state.recentSearches,\n    // 최근 검색어 가져오기\n    searchResults: state => state.searchResults // 저장된 검색 결과 가져오기\n  }\n});\nexport default store;","map":{"version":3,"names":["createStore","store","state","user","JSON","parse","localStorage","getItem","isAuthenticated","wishlist","recentSearches","searchResults","mutations","setUser","setItem","stringify","removeItem","logout","TOGGLE_WISHLIST","movie","existingMovieIndex","findIndex","item","id","push","splice","ADD_SEARCH_HISTORY","query","includes","unshift","length","pop","DELETE_SEARCH_HISTORY","index","SET_SEARCH_RESULTS","results","actions","toggleWishlist","commit","addSearchHistory","deleteSearchHistory","setSearchResults","console","log","getters","isInWishlist","some"],"sources":["C:/Users/hyemi/WSD-Assignment-04/src/store/index.js"],"sourcesContent":["import { createStore } from \"vuex\";\r\n\r\nconst store = createStore({\r\n  state: {\r\n    user: JSON.parse(localStorage.getItem(\"user\")) || null, // 사용자 정보\r\n    isAuthenticated: !!localStorage.getItem(\"user\"), // 인증 상태\r\n    wishlist: JSON.parse(localStorage.getItem(\"wishlist\")) || [], // 찜 목록\r\n    recentSearches: JSON.parse(localStorage.getItem(\"recentSearches\")) || [], // 최근 검색어 목록\r\n    searchResults: JSON.parse(localStorage.getItem(\"searchResults\")) || [], // 검색 결과 저장\r\n  },\r\n  mutations: {\r\n    setUser(state, user) {\r\n      state.user = user;\r\n      state.isAuthenticated = !!user;\r\n      if (user) {\r\n        localStorage.setItem(\"user\", JSON.stringify(user));\r\n      } else {\r\n        localStorage.removeItem(\"user\");\r\n      }\r\n    },\r\n    logout(state) {\r\n      state.user = null;\r\n      state.isAuthenticated = false;\r\n      localStorage.removeItem(\"user\");\r\n    },\r\n    TOGGLE_WISHLIST(state, movie) {\r\n      const existingMovieIndex = state.wishlist.findIndex(\r\n        (item) => item.id === movie.id\r\n      );\r\n\r\n      if (existingMovieIndex === -1) {\r\n        // 영화가 찜 목록에 없으면 추가\r\n        state.wishlist.push(movie);\r\n      } else {\r\n        // 영화가 찜 목록에 있으면 제거\r\n        state.wishlist.splice(existingMovieIndex, 1);\r\n      }\r\n\r\n      localStorage.setItem(\"wishlist\", JSON.stringify(state.wishlist));\r\n    },\r\n    ADD_SEARCH_HISTORY(state, query) {\r\n      if (!state.recentSearches.includes(query)) {\r\n        state.recentSearches.unshift(query); // 최신 검색어를 목록 맨 앞에 추가\r\n        if (state.recentSearches.length > 10) {\r\n          state.recentSearches.pop(); // 최근 검색어는 최대 10개까지만 유지\r\n        }\r\n        localStorage.setItem(\r\n          \"recentSearches\",\r\n          JSON.stringify(state.recentSearches)\r\n        );\r\n      }\r\n    },\r\n    DELETE_SEARCH_HISTORY(state, index) {\r\n      state.recentSearches.splice(index, 1); // 해당 인덱스의 검색어 삭제\r\n      localStorage.setItem(\r\n        \"recentSearches\",\r\n        JSON.stringify(state.recentSearches)\r\n      );\r\n    },\r\n    SET_SEARCH_RESULTS(state, results) {\r\n      state.searchResults = results; // 검색 결과 저장\r\n      localStorage.setItem(\"searchResults\", JSON.stringify(results));\r\n    },\r\n  },\r\n  actions: {\r\n    toggleWishlist({ commit }, movie) {\r\n      commit(\"TOGGLE_WISHLIST\", movie);\r\n    },\r\n    addSearchHistory({ commit }, query) {\r\n      commit(\"ADD_SEARCH_HISTORY\", query);\r\n    },\r\n    deleteSearchHistory({ commit }, index) {\r\n      commit(\"DELETE_SEARCH_HISTORY\", index);\r\n    },\r\n    setSearchResults({ commit }, results) {\r\n      console.log(\"검색 결과 저장 중:\", results);\r\n      commit(\"SET_SEARCH_RESULTS\", results);\r\n    },\r\n  },\r\n  getters: {\r\n    wishlist: (state) => state.wishlist, // 찜 목록 가져오기\r\n    isInWishlist: (state) => (id) => {\r\n      return state.wishlist.some((movie) => movie.id === id); // 특정 영화가 찜 목록에 있는지 확인\r\n    },\r\n    recentSearches: (state) => state.recentSearches, // 최근 검색어 가져오기\r\n    searchResults: (state) => state.searchResults, // 저장된 검색 결과 가져오기\r\n  },\r\n});\r\n\r\nexport default store;\r\n"],"mappings":";;;AAAA,SAASA,WAAW,QAAQ,MAAM;AAElC,MAAMC,KAAK,GAAGD,WAAW,CAAC;EACxBE,KAAK,EAAE;IACLC,IAAI,EAAEC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,IAAI;IAAE;IACxDC,eAAe,EAAE,CAAC,CAACF,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAAE;IACjDE,QAAQ,EAAEL,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC,IAAI,EAAE;IAAE;IAC9DG,cAAc,EAAEN,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC,CAAC,IAAI,EAAE;IAAE;IAC1EI,aAAa,EAAEP,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,CAAC,IAAI,EAAE,CAAE;EAC1E,CAAC;EACDK,SAAS,EAAE;IACTC,OAAOA,CAACX,KAAK,EAAEC,IAAI,EAAE;MACnBD,KAAK,CAACC,IAAI,GAAGA,IAAI;MACjBD,KAAK,CAACM,eAAe,GAAG,CAAC,CAACL,IAAI;MAC9B,IAAIA,IAAI,EAAE;QACRG,YAAY,CAACQ,OAAO,CAAC,MAAM,EAAEV,IAAI,CAACW,SAAS,CAACZ,IAAI,CAAC,CAAC;MACpD,CAAC,MAAM;QACLG,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;MACjC;IACF,CAAC;IACDC,MAAMA,CAACf,KAAK,EAAE;MACZA,KAAK,CAACC,IAAI,GAAG,IAAI;MACjBD,KAAK,CAACM,eAAe,GAAG,KAAK;MAC7BF,YAAY,CAACU,UAAU,CAAC,MAAM,CAAC;IACjC,CAAC;IACDE,eAAeA,CAAChB,KAAK,EAAEiB,KAAK,EAAE;MAC5B,MAAMC,kBAAkB,GAAGlB,KAAK,CAACO,QAAQ,CAACY,SAAS,CAChDC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKJ,KAAK,CAACI,EAC9B,CAAC;MAED,IAAIH,kBAAkB,KAAK,CAAC,CAAC,EAAE;QAC7B;QACAlB,KAAK,CAACO,QAAQ,CAACe,IAAI,CAACL,KAAK,CAAC;MAC5B,CAAC,MAAM;QACL;QACAjB,KAAK,CAACO,QAAQ,CAACgB,MAAM,CAACL,kBAAkB,EAAE,CAAC,CAAC;MAC9C;MAEAd,YAAY,CAACQ,OAAO,CAAC,UAAU,EAAEV,IAAI,CAACW,SAAS,CAACb,KAAK,CAACO,QAAQ,CAAC,CAAC;IAClE,CAAC;IACDiB,kBAAkBA,CAACxB,KAAK,EAAEyB,KAAK,EAAE;MAC/B,IAAI,CAACzB,KAAK,CAACQ,cAAc,CAACkB,QAAQ,CAACD,KAAK,CAAC,EAAE;QACzCzB,KAAK,CAACQ,cAAc,CAACmB,OAAO,CAACF,KAAK,CAAC,CAAC,CAAC;QACrC,IAAIzB,KAAK,CAACQ,cAAc,CAACoB,MAAM,GAAG,EAAE,EAAE;UACpC5B,KAAK,CAACQ,cAAc,CAACqB,GAAG,CAAC,CAAC,CAAC,CAAC;QAC9B;QACAzB,YAAY,CAACQ,OAAO,CAClB,gBAAgB,EAChBV,IAAI,CAACW,SAAS,CAACb,KAAK,CAACQ,cAAc,CACrC,CAAC;MACH;IACF,CAAC;IACDsB,qBAAqBA,CAAC9B,KAAK,EAAE+B,KAAK,EAAE;MAClC/B,KAAK,CAACQ,cAAc,CAACe,MAAM,CAACQ,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;MACvC3B,YAAY,CAACQ,OAAO,CAClB,gBAAgB,EAChBV,IAAI,CAACW,SAAS,CAACb,KAAK,CAACQ,cAAc,CACrC,CAAC;IACH,CAAC;IACDwB,kBAAkBA,CAAChC,KAAK,EAAEiC,OAAO,EAAE;MACjCjC,KAAK,CAACS,aAAa,GAAGwB,OAAO,CAAC,CAAC;MAC/B7B,YAAY,CAACQ,OAAO,CAAC,eAAe,EAAEV,IAAI,CAACW,SAAS,CAACoB,OAAO,CAAC,CAAC;IAChE;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,cAAcA,CAAC;MAAEC;IAAO,CAAC,EAAEnB,KAAK,EAAE;MAChCmB,MAAM,CAAC,iBAAiB,EAAEnB,KAAK,CAAC;IAClC,CAAC;IACDoB,gBAAgBA,CAAC;MAAED;IAAO,CAAC,EAAEX,KAAK,EAAE;MAClCW,MAAM,CAAC,oBAAoB,EAAEX,KAAK,CAAC;IACrC,CAAC;IACDa,mBAAmBA,CAAC;MAAEF;IAAO,CAAC,EAAEL,KAAK,EAAE;MACrCK,MAAM,CAAC,uBAAuB,EAAEL,KAAK,CAAC;IACxC,CAAC;IACDQ,gBAAgBA,CAAC;MAAEH;IAAO,CAAC,EAAEH,OAAO,EAAE;MACpCO,OAAO,CAACC,GAAG,CAAC,aAAa,EAAER,OAAO,CAAC;MACnCG,MAAM,CAAC,oBAAoB,EAAEH,OAAO,CAAC;IACvC;EACF,CAAC;EACDS,OAAO,EAAE;IACPnC,QAAQ,EAAGP,KAAK,IAAKA,KAAK,CAACO,QAAQ;IAAE;IACrCoC,YAAY,EAAG3C,KAAK,IAAMqB,EAAE,IAAK;MAC/B,OAAOrB,KAAK,CAACO,QAAQ,CAACqC,IAAI,CAAE3B,KAAK,IAAKA,KAAK,CAACI,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC;IACDb,cAAc,EAAGR,KAAK,IAAKA,KAAK,CAACQ,cAAc;IAAE;IACjDC,aAAa,EAAGT,KAAK,IAAKA,KAAK,CAACS,aAAa,CAAE;EACjD;AACF,CAAC,CAAC;AAEF,eAAeV,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}