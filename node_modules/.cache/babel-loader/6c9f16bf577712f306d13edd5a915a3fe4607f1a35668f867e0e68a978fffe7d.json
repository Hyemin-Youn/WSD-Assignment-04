{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nexport default {\n  data() {\n    return {\n      activeCard: \"login\",\n      // 현재 활성 카드 (login or signup)\n      email: \"\",\n      password: \"\",\n      rememberMe: false,\n      loginError: \"\",\n      newEmail: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\",\n      termsAccepted: false,\n      signupError: \"\"\n    };\n  },\n  methods: {\n    switchToSignup() {\n      this.activeCard = \"signup\";\n      this.triggerCardAnimation();\n    },\n    switchToLogin() {\n      this.activeCard = \"login\";\n      this.triggerCardAnimation();\n    },\n    triggerCardAnimation() {\n      const cards = document.querySelectorAll(\".card\");\n      cards.forEach(card => {\n        if (card.classList.contains(\"active\")) {\n          card.classList.remove(\"active\");\n          card.classList.add(\"backward\");\n        } else {\n          card.classList.remove(\"backward\");\n          card.classList.add(\"enter\");\n          setTimeout(() => {\n            card.classList.remove(\"enter\");\n            card.classList.add(\"active\");\n          }, 1000); // 애니메이션 시간을 1초로 설정\n        }\n      });\n    },\n    handleLogin() {\n      if (this.password.length < 6) {\n        this.loginError = \"Password must be at least 6 characters long.\";\n        return;\n      }\n      alert(\"Login successful!\");\n      this.$store.dispatch(\"login\", {\n        email: this.email\n      });\n      if (this.$route.path !== \"/home\") {\n        this.$router.push(\"/home\");\n      }\n    },\n    handleRegister() {\n      if (this.newPassword.length < 6) {\n        this.signupError = \"Password must be at least 6 characters long.\";\n        return;\n      }\n      if (this.newPassword !== this.confirmPassword) {\n        this.signupError = \"Passwords do not match.\";\n        return;\n      }\n      alert(\"Registration successful!\");\n      this.switchToLogin();\n    }\n  }\n};","map":{"version":3,"names":["data","activeCard","email","password","rememberMe","loginError","newEmail","newPassword","confirmPassword","termsAccepted","signupError","methods","switchToSignup","triggerCardAnimation","switchToLogin","cards","document","querySelectorAll","forEach","card","classList","contains","remove","add","setTimeout","handleLogin","length","alert","$store","dispatch","$route","path","$router","push","handleRegister"],"sources":["C:\\Users\\hyemi\\WSD-Assignment-04\\src\\components\\sign-in\\SignIn.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"bg-image\" />\r\n    <div class=\"wrapper\">\r\n      <!-- 로그인 카드 -->\r\n      <div\r\n        class=\"card\"\r\n        :class=\"{ active: activeCard === 'login', backward: activeCard === 'signup' }\"\r\n      >\r\n        <div class=\"content\">\r\n          <h2>Login</h2>\r\n          <form @submit.prevent=\"handleLogin\">\r\n            <label for=\"email\">Email</label>\r\n            <input\r\nid=\"email\"\r\nv-model=\"email\"\r\ntype=\"email\"\r\nrequired\r\n>\r\n\r\n            <label for=\"password\">Password</label>\r\n            <input\r\nid=\"password\"\r\nv-model=\"password\"\r\ntype=\"password\"\r\nrequired\r\n>\r\n\r\n            <p\r\nv-if=\"loginError\"\r\nclass=\"error\"\r\n>\r\n{{ loginError }}\r\n</p>\r\n\r\n            <div class=\"remember-me\">\r\n              <input\r\nid=\"rememberMe\"\r\nv-model=\"rememberMe\"\r\ntype=\"checkbox\"\r\n>\r\n              <label for=\"rememberMe\">Remember Me</label>\r\n            </div>\r\n\r\n            <button type=\"submit\">\r\nSign In\r\n</button>\r\n          </form>\r\n          <p\r\nclass=\"switch\"\r\n@click=\"switchToSignup\"\r\n>\r\n            Don't have an account? <b>Sign up</b>\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- 회원가입 카드 -->\r\n      <div\r\n        class=\"card\"\r\n        :class=\"{ active: activeCard === 'signup', backward: activeCard === 'login' }\"\r\n      >\r\n        <div class=\"content\">\r\n          <h2>Sign Up</h2>\r\n          <form @submit.prevent=\"handleRegister\">\r\n            <label for=\"newEmail\">Email</label>\r\n            <input\r\nid=\"newEmail\"\r\nv-model=\"newEmail\"\r\ntype=\"email\"\r\nrequired\r\n>\r\n\r\n            <label for=\"newPassword\">Password</label>\r\n            <input\r\nid=\"newPassword\"\r\nv-model=\"newPassword\"\r\ntype=\"password\"\r\nrequired\r\n>\r\n\r\n            <label for=\"confirmPassword\">Confirm Password</label>\r\n            <input\r\n              id=\"confirmPassword\"\r\n              v-model=\"confirmPassword\"\r\n              type=\"password\"\r\n              required\r\n            >\r\n\r\n            <p\r\nv-if=\"signupError\"\r\nclass=\"error\"\r\n>\r\n{{ signupError }}\r\n</p>\r\n\r\n            <div class=\"terms\">\r\n              <input\r\nid=\"terms\"\r\nv-model=\"termsAccepted\"\r\ntype=\"checkbox\"\r\n>\r\n              <label for=\"terms\">I have read the <b>Terms and Conditions</b></label>\r\n            </div>\r\n\r\n            <button\r\ntype=\"submit\"\r\n:disabled=\"!termsAccepted\"\r\n>\r\nRegister\r\n</button>\r\n          </form>\r\n          <p\r\nclass=\"switch\"\r\n@click=\"switchToLogin\"\r\n>\r\n            Already have an account? <b>Sign in</b>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      activeCard: \"login\", // 현재 활성 카드 (login or signup)\r\n      email: \"\",\r\n      password: \"\",\r\n      rememberMe: false,\r\n      loginError: \"\",\r\n      newEmail: \"\",\r\n      newPassword: \"\",\r\n      confirmPassword: \"\",\r\n      termsAccepted: false,\r\n      signupError: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    switchToSignup() {\r\n      this.activeCard = \"signup\";\r\n      this.triggerCardAnimation();\r\n    },\r\n    switchToLogin() {\r\n      this.activeCard = \"login\";\r\n      this.triggerCardAnimation();\r\n    },\r\n    triggerCardAnimation() {\r\n      const cards = document.querySelectorAll(\".card\");\r\n      cards.forEach((card) => {\r\n        if (card.classList.contains(\"active\")) {\r\n          card.classList.remove(\"active\");\r\n          card.classList.add(\"backward\");\r\n        } else {\r\n          card.classList.remove(\"backward\");\r\n          card.classList.add(\"enter\");\r\n          setTimeout(() => {\r\n            card.classList.remove(\"enter\");\r\n            card.classList.add(\"active\");\r\n          }, 1000); // 애니메이션 시간을 1초로 설정\r\n        }\r\n      });\r\n    },\r\n    handleLogin() {\r\n      if (this.password.length < 6) {\r\n        this.loginError = \"Password must be at least 6 characters long.\";\r\n        return;\r\n      }\r\n      alert(\"Login successful!\");\r\n      this.$store.dispatch(\"login\", { email: this.email });\r\n      if (this.$route.path !== \"/home\") {\r\n        this.$router.push(\"/home\");\r\n      }\r\n    },\r\n    handleRegister() {\r\n      if (this.newPassword.length < 6) {\r\n        this.signupError = \"Password must be at least 6 characters long.\";\r\n        return;\r\n      }\r\n      if (this.newPassword !== this.confirmPassword) {\r\n        this.signupError = \"Passwords do not match.\";\r\n        return;\r\n      }\r\n      alert(\"Registration successful!\");\r\n      this.switchToLogin();\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 배경 이미지 */\r\n.bg-image {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-image: url('https://images.unsplash.com/photo-1512070679279-8988d32161be?q=80&w=1938&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D');\r\n  background-size: cover;\r\n  background-position: center;\r\n  z-index: -1;\r\n}\r\n\r\n/* 컨테이너 */\r\n.wrapper {\r\n  width: 90%;\r\n  max-width: 600px; /* 데스크톱에서는 최대 600px */\r\n  height: auto; /* 높이를 콘텐츠에 따라 조정 */\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  perspective: 1000px;\r\n}\r\n\r\n/* 카드 */\r\n.card {\r\n  width: 100%; /* wrapper에 맞게 크기 조정 */\r\n  max-width: 560px; /* 데스크톱에서 최대 너비 */\r\n  height: auto; /* 높이를 콘텐츠에 따라 자동 조정 */\r\n  position: absolute;\r\n  transform-style: preserve-3d;\r\n  transition: transform 1.2s ease-in-out, opacity 1.2s ease-in-out;\r\n  opacity: 0;\r\n  z-index: 0;\r\n  margin: 20px auto; /* 화면 중앙 정렬 */\r\n}\r\n\r\n/* 활성 카드 */\r\n.card.active {\r\n  opacity: 1;\r\n  z-index: 2;\r\n  transform: rotateY(0deg) translateX(0);\r\n}\r\n\r\n/* 뒤로 이동 */\r\n.card.backward {\r\n  z-index: 1;\r\n  transform: rotateY(-90deg) translateX(-100%);\r\n  opacity: 0;\r\n}\r\n\r\n/* 카드 애니메이션 진입 */\r\n.card.enter {\r\n  opacity: 0;\r\n  transform: rotateY(90deg) translateX(100%);\r\n}\r\n\r\n/* 카드 콘텐츠 */\r\n.content {\r\n  width: 100%;\r\n  height: 100%;\r\n  padding: 20px;\r\n  text-align: center;\r\n  background: #e50914;\r\n  color: #fff;\r\n  border-radius: 15px;\r\n  border: 1px solid rgba(255, 255, 255, 0.15);\r\n  box-sizing: border-box;\r\n}\r\n\r\n/* 텍스트 스타일 */\r\nh2 {\r\n  margin-bottom: 20px;\r\n  font-size: 1.5rem;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-top: 10px;\r\n  font-size: 0.9rem;\r\n}\r\n\r\ninput {\r\n  width: 100%;\r\n  padding: 10px;\r\n  margin-top: 6px;\r\n  margin-bottom: 12px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  font-size: 0.9rem;\r\n  margin: 20px auto;\r\n}\r\n\r\nbutton {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #bf0812;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  font-size: 0.9rem;\r\n}\r\n\r\nbutton:hover {\r\n  background-color: #a10610;\r\n}\r\n\r\n.switch {\r\n  margin-top: 15px;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  text-decoration: underline;\r\n  font-size: 0.8rem;\r\n}\r\n\r\n.error {\r\n  color: yellow;\r\n  font-size: 0.8rem;\r\n  margin-top: 8px;\r\n}\r\n\r\n/* 반응형 스타일 */\r\n@media (max-width: 768px) {\r\n  .wrapper {\r\n    width: 95%; /* 작은 화면에서 wrapper 너비 확대 */\r\n    padding: 10px; /* 여백 추가 */\r\n  }\r\n\r\n  .content {\r\n    padding: 15px; /* 콘텐츠 여백 감소 */\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1.2rem; /* 제목 크기 축소 */\r\n  }\r\n\r\n  input {\r\n    font-size: 0.8rem; /* 입력 필드 글자 크기 축소 */\r\n    padding: 8px; /* 입력 필드 여백 축소 */\r\n  }\r\n\r\n  button {\r\n    font-size: 0.8rem; /* 버튼 글자 크기 축소 */\r\n    padding: 8px; /* 버튼 여백 축소 */\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .wrapper {\r\n    width: 100%; /* 모바일 화면에서 전체 너비 사용 */\r\n    padding: 10px;\r\n  }\r\n\r\n  .content {\r\n    padding: 40px; /* 모바일 콘텐츠 여백 축소 */\r\n  }\r\n\r\n  h2 {\r\n    font-size: 1rem; /* 제목 크기 더 축소 */\r\n  }\r\n\r\n  input {\r\n    font-size: 0.8rem; /* 입력 필드 글자 크기 축소 */\r\n    padding: 8px;\r\n  }\r\n\r\n  button {\r\n    font-size: 0.8rem; /* 버튼 글자 크기 축소 */\r\n    padding: 8px;\r\n  }\r\n}\r\n\r\n  /* 컨테이너 가로 폭 */\r\n  .card {\r\n      width: 70%; /* 화면 너비의 70%로 설정 */\r\n      max-width: 350px; /* 최대 350px로 제한 */\r\n      margin: 0 auto; /* 중앙 정렬 */\r\n      padding: 20px; /* 내부 여백 */\r\n      background-color: red; /* 카드 배경색 */\r\n      border-radius: 10px; /* 둥근 모서리 */\r\n      height: auto;\r\n  }\r\n\r\n  /* 버튼과 \"Remember Me\" 간 간격 조정 */\r\n  .remember-me {\r\n      margin-bottom: 5px; /* Remember Me와 버튼 사이 간격 */\r\n  }\r\n\r\n  button {\r\n      margin-top: 10px; /* 버튼 위쪽 간격 */\r\n      padding: 10px 20px; /* 버튼 내부 여백 */\r\n      width: 100%; /* 버튼을 컨테이너 너비에 맞춤 */\r\n      background-color: darkred; /* 버튼 배경색 */\r\n      color: white; /* 버튼 텍스트 색 */\r\n      border: none; /* 버튼 테두리 제거 */\r\n      border-radius: 5px; /* 버튼 모서리 둥글게 */\r\n  }\r\n  .container {\r\n    width: 100%;\r\n    max-width: 400px;\r\n    padding: 20px; /* 기존 padding을 줄임 */\r\n    margin: 0 auto;\r\n    background-color: rgb(102, 4, 4);\r\n}\r\n\r\n/*prompt engineering 답변*/\r\ninput,\r\nbutton {\r\n    width: 100%;\r\n    margin: 8px 0; /* 위아래 간격 최소화 */\r\n    padding: 8px;   /* 내부 공간 줄임 */\r\n    font-size: 14px; /* 글꼴 크기 줄임 */\r\n}\r\n\r\n.checkbox-label {\r\n    margin-left: 5px;\r\n}\r\n\r\n.terms {\r\n    font-size: 12px; /* 텍스트 크기 줄임 */\r\n    line-height: 1.2; /* 줄 간격 축소 */\r\n}\r\n\r\n</style>\r\n"],"mappings":";;;AA6HA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE,OAAO;MAAE;MACrBC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE,KAAK;MACjBC,UAAU,EAAE,EAAE;MACdC,QAAQ,EAAE,EAAE;MACZC,WAAW,EAAE,EAAE;MACfC,eAAe,EAAE,EAAE;MACnBC,aAAa,EAAE,KAAK;MACpBC,WAAW,EAAE;IACf,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,cAAcA,CAAA,EAAG;MACf,IAAI,CAACX,UAAS,GAAI,QAAQ;MAC1B,IAAI,CAACY,oBAAoB,CAAC,CAAC;IAC7B,CAAC;IACDC,aAAaA,CAAA,EAAG;MACd,IAAI,CAACb,UAAS,GAAI,OAAO;MACzB,IAAI,CAACY,oBAAoB,CAAC,CAAC;IAC7B,CAAC;IACDA,oBAAoBA,CAAA,EAAG;MACrB,MAAME,KAAI,GAAIC,QAAQ,CAACC,gBAAgB,CAAC,OAAO,CAAC;MAChDF,KAAK,CAACG,OAAO,CAAEC,IAAI,IAAK;QACtB,IAAIA,IAAI,CAACC,SAAS,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;UACrCF,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,QAAQ,CAAC;UAC/BH,IAAI,CAACC,SAAS,CAACG,GAAG,CAAC,UAAU,CAAC;QAChC,OAAO;UACLJ,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,UAAU,CAAC;UACjCH,IAAI,CAACC,SAAS,CAACG,GAAG,CAAC,OAAO,CAAC;UAC3BC,UAAU,CAAC,MAAM;YACfL,IAAI,CAACC,SAAS,CAACE,MAAM,CAAC,OAAO,CAAC;YAC9BH,IAAI,CAACC,SAAS,CAACG,GAAG,CAAC,QAAQ,CAAC;UAC9B,CAAC,EAAE,IAAI,CAAC,EAAE;QACZ;MACF,CAAC,CAAC;IACJ,CAAC;IACDE,WAAWA,CAAA,EAAG;MACZ,IAAI,IAAI,CAACtB,QAAQ,CAACuB,MAAK,GAAI,CAAC,EAAE;QAC5B,IAAI,CAACrB,UAAS,GAAI,8CAA8C;QAChE;MACF;MACAsB,KAAK,CAAC,mBAAmB,CAAC;MAC1B,IAAI,CAACC,MAAM,CAACC,QAAQ,CAAC,OAAO,EAAE;QAAE3B,KAAK,EAAE,IAAI,CAACA;MAAM,CAAC,CAAC;MACpD,IAAI,IAAI,CAAC4B,MAAM,CAACC,IAAG,KAAM,OAAO,EAAE;QAChC,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,OAAO,CAAC;MAC5B;IACF,CAAC;IACDC,cAAcA,CAAA,EAAG;MACf,IAAI,IAAI,CAAC3B,WAAW,CAACmB,MAAK,GAAI,CAAC,EAAE;QAC/B,IAAI,CAAChB,WAAU,GAAI,8CAA8C;QACjE;MACF;MACA,IAAI,IAAI,CAACH,WAAU,KAAM,IAAI,CAACC,eAAe,EAAE;QAC7C,IAAI,CAACE,WAAU,GAAI,yBAAyB;QAC5C;MACF;MACAiB,KAAK,CAAC,0BAA0B,CAAC;MACjC,IAAI,CAACb,aAAa,CAAC,CAAC;IACtB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}