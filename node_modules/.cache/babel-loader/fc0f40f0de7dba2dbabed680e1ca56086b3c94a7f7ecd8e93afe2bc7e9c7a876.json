{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport axios from \"axios\";\nimport { API_KEY, BASE_URL } from \"@/config\";\n\n// 인기 영화 데이터를 가져오는 함수\nexport const fetchPopularMovies = async (page = 1) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/movie/popular`, {\n      params: {\n        api_key: API_KEY,\n        language: \"ko-KR\",\n        page\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error(\"Error fetching popular movies:\", error);\n    return {\n      results: []\n    };\n  }\n};\n\n// 검색 및 필터 옵션에 따라 영화를 가져오는 함수\nexport const fetchMovies = async filters => {\n  const {\n    genre,\n    rating,\n    language,\n    page = 1\n  } = filters;\n  try {\n    const params = {\n      api_key: API_KEY,\n      language: \"ko-KR\",\n      page\n    };\n\n    // 장르 필터 추가\n    if (genre && genre !== \"장르 (전체)\") {\n      const genreMap = {\n        Action: 28,\n        Adventure: 12,\n        Comedy: 35,\n        Crime: 80,\n        Family: 10751\n      };\n      params.with_genres = genreMap[genre] || null; // 장르 매핑\n    }\n\n    // 평점 필터 추가\n    if (rating && rating !== \"평점 (전체)\") {\n      const [minRating, maxRating] = rating.split(\"~\").map(Number);\n      params[\"vote_average.gte\"] = minRating || 0;\n      params[\"vote_average.lte\"] = maxRating || 10;\n    }\n\n    // 언어 필터 추가\n    if (language && language !== \"언어 (전체)\") {\n      params.with_original_language = language;\n    }\n    const response = await axios.get(`${BASE_URL}/discover/movie`, {\n      params\n    });\n    return response.data; // 전체 데이터를 반환\n  } catch (error) {\n    console.error(\"Error fetching movies:\", error);\n    return {\n      results: []\n    }; // 빈 데이터 반환\n  }\n};\n\n// 카테고리별 영화 데이터를 가져오는 함수\nexport const fetchMoviesByCategory = async (category, page = 1) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/movie/${category}`, {\n      params: {\n        api_key: API_KEY,\n        language: \"ko-KR\",\n        page\n      }\n    });\n    return response.data.results; // 영화 목록만 반환\n  } catch (error) {\n    console.error(`Error fetching ${category} movies:`, error);\n    return [];\n  }\n};\n\n// 키워드로 영화를 검색하는 함수\nexport const searchMovies = async (query, page = 1) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/search/movie`, {\n      params: {\n        api_key: API_KEY,\n        language: \"ko-KR\",\n        query,\n        page\n      }\n    });\n    return response.data.results; // 영화 목록만 반환\n  } catch (error) {\n    console.error(\"Error searching movies:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","API_KEY","BASE_URL","fetchPopularMovies","page","response","get","params","api_key","language","data","error","console","results","fetchMovies","filters","genre","rating","genreMap","Action","Adventure","Comedy","Crime","Family","with_genres","minRating","maxRating","split","map","Number","with_original_language","fetchMoviesByCategory","category","searchMovies","query"],"sources":["C:/Users/hyemi/WSD-Assignment-04/src/api/movies.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { API_KEY, BASE_URL } from \"@/config\";\r\n\r\n// 인기 영화 데이터를 가져오는 함수\r\nexport const fetchPopularMovies = async (page = 1) => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/movie/popular`, {\r\n      params: {\r\n        api_key: API_KEY,\r\n        language: \"ko-KR\",\r\n        page,\r\n      },\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error(\"Error fetching popular movies:\", error);\r\n    return { results: [] };\r\n  }\r\n};\r\n\r\n// 검색 및 필터 옵션에 따라 영화를 가져오는 함수\r\nexport const fetchMovies = async (filters) => {\r\n  const { genre, rating, language, page = 1 } = filters;\r\n\r\n  try {\r\n    const params = {\r\n      api_key: API_KEY,\r\n      language: \"ko-KR\",\r\n      page,\r\n    };\r\n\r\n    // 장르 필터 추가\r\n    if (genre && genre !== \"장르 (전체)\") {\r\n      const genreMap = {\r\n        Action: 28,\r\n        Adventure: 12,\r\n        Comedy: 35,\r\n        Crime: 80,\r\n        Family: 10751,\r\n      };\r\n      params.with_genres = genreMap[genre] || null; // 장르 매핑\r\n    }\r\n\r\n    // 평점 필터 추가\r\n    if (rating && rating !== \"평점 (전체)\") {\r\n      const [minRating, maxRating] = rating.split(\"~\").map(Number);\r\n      params[\"vote_average.gte\"] = minRating || 0;\r\n      params[\"vote_average.lte\"] = maxRating || 10;\r\n    }\r\n\r\n    // 언어 필터 추가\r\n    if (language && language !== \"언어 (전체)\") {\r\n      params.with_original_language = language;\r\n    }\r\n\r\n    const response = await axios.get(`${BASE_URL}/discover/movie`, { params });\r\n    return response.data; // 전체 데이터를 반환\r\n  } catch (error) {\r\n    console.error(\"Error fetching movies:\", error);\r\n    return { results: [] }; // 빈 데이터 반환\r\n  }\r\n};\r\n\r\n// 카테고리별 영화 데이터를 가져오는 함수\r\nexport const fetchMoviesByCategory = async (category, page = 1) => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/movie/${category}`, {\r\n      params: {\r\n        api_key: API_KEY,\r\n        language: \"ko-KR\",\r\n        page,\r\n      },\r\n    });\r\n    return response.data.results; // 영화 목록만 반환\r\n  } catch (error) {\r\n    console.error(`Error fetching ${category} movies:`, error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// 키워드로 영화를 검색하는 함수\r\nexport const searchMovies = async (query, page = 1) => {\r\n  try {\r\n    const response = await axios.get(`${BASE_URL}/search/movie`, {\r\n      params: {\r\n        api_key: API_KEY,\r\n        language: \"ko-KR\",\r\n        query,\r\n        page,\r\n      },\r\n    });\r\n    return response.data.results; // 영화 목록만 반환\r\n  } catch (error) {\r\n    console.error(\"Error searching movies:\", error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}