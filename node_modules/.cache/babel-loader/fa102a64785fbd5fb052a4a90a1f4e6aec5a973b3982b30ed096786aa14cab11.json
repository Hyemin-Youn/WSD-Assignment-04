{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"home\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"loading-overlay\"\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Navbar = _resolveComponent(\"Navbar\");\n  const _component_Banner = _resolveComponent(\"Banner\");\n  const _component_SliderContent = _resolveComponent(\"SliderContent\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_Navbar), _createElementVNode(\"div\", _hoisted_1, [$data.isLoading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, _cache[0] || (_cache[0] = [_createElementVNode(\"p\", null, \"로딩중...\", -1)]))) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createVNode(_component_Banner, {\n    heroMovie: $data.heroMovie\n  }, null, 8, [\"heroMovie\"]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.movieCategories, category => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: category.name,\n      class: \"movie-category\"\n    }, [_createElementVNode(\"h3\", null, _toDisplayString(category.title), 1), _createVNode(_component_SliderContent, {\n      movies: category.movies\n    }, null, 8, [\"movies\"])]);\n  }), 128))]))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_createVNode","_component_Navbar","_createElementVNode","_hoisted_1","$data","isLoading","_hoisted_2","_cache","_hoisted_3","_component_Banner","heroMovie","_Fragment","_renderList","movieCategories","category","name","_toDisplayString","title","_component_SliderContent","movies"],"sources":["C:\\Users\\hyemi\\WSD-Assignment-04\\src\\views\\Home.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <Navbar />\r\n\r\n    <div class=\"home\">\r\n      <div\nv-if=\"isLoading\"\nclass=\"loading-overlay\"\n>\r\n        <p>로딩중...</p>\r\n      </div>\r\n\r\n      <div v-else>\r\n        <Banner :heroMovie=\"heroMovie\" />\r\n        \r\n        <div\nv-for=\"category in movieCategories\"\n:key=\"category.name\"\nclass=\"movie-category\"\n>\r\n          <h3>{{ category.title }}</h3>\r\n          <SliderContent :movies=\"category.movies\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\nimport Banner from \"@/components/Banner.vue\";\r\nimport Navbar from \"@/components/Navbar.vue\";\r\nimport SliderContent from \"@/components/SliderContent.vue\";\r\n\r\nexport default {\r\n  name: \"Home\",\r\n  components: {\r\n    Banner,\r\n    Navbar,\r\n    SliderContent,\r\n  },\r\n  data() {\r\n    return {\r\n      isLoading: true,\r\n      heroMovie: {},\r\n      movieCategories: [\r\n        { name: \"popular\", title: \"인기 영화\", movies: [] },\r\n        { name: \"now_playing\", title: \"최신 영화\", movies: [] },\r\n        { name: \"top_rated\", title: \"높은 평점 영화\", movies: [] },\r\n        { name: \"upcoming\", title: \"개봉 예정 영화\", movies: [] },\r\n      ],\r\n    };\r\n  },\r\n  created() {\r\n    this.loadData();\r\n  },\r\n  methods: {\r\n    async loadData() {\r\n      try {\r\n        await Promise.all([this.fetchHeroMovie(), this.fetchMovies()]);\r\n      } catch (error) {\r\n        console.error(\"Error loading data:\", error);\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    async fetchHeroMovie() {\r\n      const API_KEY = process.env.VUE_APP_API_KEY;\r\n      try {\r\n        const response = await axios.get(\r\n          `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=ko-KR`\r\n        );\r\n        this.heroMovie = response.data.results[0];\r\n      } catch (error) {\r\n        console.error(\"Hero Movie 로드 실패:\", error);\r\n      }\r\n    },\r\n    async fetchMovies() {\r\n      const API_KEY = process.env.VUE_APP_API_KEY;\r\n      try {\r\n        const requests = this.movieCategories.map(async (category) => {\r\n          const response = await axios.get(\r\n            `https://api.themoviedb.org/3/movie/${category.name}?api_key=${API_KEY}&language=ko-KR`\r\n          );\r\n          category.movies = response.data.results;\r\n        });\r\n        await Promise.all(requests);\r\n      } catch (error) {\r\n        console.error(\"Movie Categories 로드 실패:\", error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.home {\r\n  padding: 20px;\r\n  background-color: #141414;\r\n  color: #ffffff;\r\n}\r\n\r\n.loading-overlay {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: rgba(0, 0, 0, 0.8);\r\n  color: white;\r\n  font-size: 1.5em;\r\n}\r\n\r\n.movie-category {\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.movie-category h3 {\r\n  font-size: 1.5em;\r\n  margin-bottom: 10px;\r\n}\r\n</style>\r\n"],"mappings":";;EAISA,KAAK,EAAC;AAAM;;EAJrBC,GAAA;EAOAD,KAAK,EAAC;;;EAPNC,GAAA;AAAA;;;;;uBACEC,mBAAA,CAwBM,cAvBJC,YAAA,CAAUC,iBAAA,GAEVC,mBAAA,CAoBM,OApBNC,UAoBM,GAlBJC,KAAA,CAAAC,SAAS,I,cADTN,mBAAA,CAKM,OALNO,UAKM,EAAAC,MAAA,QAAAA,MAAA,OADJL,mBAAA,CAAa,WAAV,QAAM,M,qBAGXH,mBAAA,CAWM,OAvBZS,UAAA,GAaQR,YAAA,CAAiCS,iBAAA;IAAxBC,SAAS,EAAEN,KAAA,CAAAM;EAAS,6B,kBAE7BX,mBAAA,CAOMY,SAAA,QAtBdC,WAAA,CAgBmBR,KAAA,CAAAS,eAAe,EAA3BC,QAAQ;yBADPf,mBAAA,CAOM;MALbD,GAAG,EAAEgB,QAAQ,CAACC,IAAI;MACnBlB,KAAK,EAAC;QAEIK,mBAAA,CAA6B,YAAAc,gBAAA,CAAtBF,QAAQ,CAACG,KAAK,OACrBjB,YAAA,CAA2CkB,wBAAA;MAA3BC,MAAM,EAAEL,QAAQ,CAACK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}