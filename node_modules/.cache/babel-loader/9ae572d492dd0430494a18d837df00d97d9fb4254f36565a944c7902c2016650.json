{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"popular\"\n};\nconst _hoisted_2 = {\n  class: \"movie-grid\"\n};\nconst _hoisted_3 = {\n  class: \"pagination\"\n};\nconst _hoisted_4 = [\"disabled\"];\nconst _hoisted_5 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_MovieCard = _resolveComponent(\"MovieCard\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 영화 리스트 \"), _createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.paginatedMovies, movie => {\n    return _openBlock(), _createBlock(_component_MovieCard, {\n      key: movie.id,\n      movie: movie\n    }, null, 8 /* PROPS */, [\"movie\"]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createCommentVNode(\" 페이지네이션 \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"button\", {\n    disabled: $data.currentPage === 1,\n    onClick: _cache[0] || (_cache[0] = $event => $options.changePage($data.currentPage - 1))\n  }, \" < 이전 \", 8 /* PROPS */, _hoisted_4), _createElementVNode(\"span\", null, _toDisplayString($data.currentPage) + \" / \" + _toDisplayString($data.totalPages), 1 /* TEXT */), _createElementVNode(\"button\", {\n    disabled: $data.currentPage === $data.totalPages,\n    onClick: _cache[1] || (_cache[1] = $event => $options.changePage($data.currentPage + 1))\n  }, \" 다음 > \", 8 /* PROPS */, _hoisted_5)])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createCommentVNode","_createElementVNode","_hoisted_2","_Fragment","_renderList","$options","paginatedMovies","movie","_createBlock","_component_MovieCard","key","id","_hoisted_3","disabled","$data","currentPage","onClick","_cache","$event","changePage","_hoisted_4","_toDisplayString","totalPages","_hoisted_5"],"sources":["C:\\Users\\hyemi\\WSD-Assignment-04\\src\\views\\PopularTable.vue"],"sourcesContent":["<template>\r\n  <div class=\"popular\">\r\n    <!-- 영화 리스트 -->\r\n    <div class=\"movie-grid\">\r\n      <MovieCard\nv-for=\"movie in paginatedMovies\"\n:key=\"movie.id\"\n:movie=\"movie\"\n/>\r\n    </div>\r\n\r\n    <!-- 페이지네이션 -->\r\n    <div class=\"pagination\">\r\n      <button\r\n        :disabled=\"currentPage === 1\"\r\n        @click=\"changePage(currentPage - 1)\"\r\n      >\r\n        &lt; 이전\r\n      </button>\r\n      <span>{{ currentPage }} / {{ totalPages }}</span>\r\n      <button\r\n        :disabled=\"currentPage === totalPages\"\r\n        @click=\"changePage(currentPage + 1)\"\r\n      >\r\n        다음 &gt;\r\n      </button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport MovieCard from \"@/components/MovieCard.vue\";\r\nimport { fetchPopularMovies } from \"@/api/movies\";\r\n\r\nexport default {\r\n  name: \"PopularTable\",\r\n  components: {\r\n    MovieCard,\r\n  },\r\n  data() {\r\n    return {\r\n      movies: [], // 전체 영화 데이터\r\n      currentPage: 1, // 현재 페이지\r\n      totalPages: 1, // 총 페이지 수\r\n      moviesPerPage: this.calculateMoviesPerPage(), // 한 페이지에 표시할 영화 수 (동적)\r\n    };\r\n  },\r\n  computed: {\r\n    // 현재 페이지에 해당하는 영화 목록 계산\r\n    paginatedMovies() {\r\n      const start = (this.currentPage - 1) * this.moviesPerPage;\r\n      const end = start + this.moviesPerPage;\r\n      return this.movies.slice(start, end);\r\n    },\r\n  },\r\n  created() {\r\n    // 컴포넌트 생성 시 영화 데이터 로드 및 resize 이벤트 리스너 추가\r\n    this.fetchMovies();\r\n    window.addEventListener(\"resize\", this.handleResize);\r\n  },\r\n  beforeDestroy() {\r\n    // 컴포넌트 파괴 시 이벤트 리스너 제거\r\n    window.removeEventListener(\"resize\", this.handleResize);\r\n  },\r\n  methods: {\r\n    // TMDB API에서 여러 페이지의 데이터를 가져와 병합\r\n    async fetchMovies() {\r\n      try {\r\n        const totalPagesToFetch = 3; // 가져올 페이지 수\r\n        let allMovies = [];\r\n\r\n        for (let page = 1; page <= totalPagesToFetch; page++) {\r\n          const data = await fetchPopularMovies(page);\r\n          allMovies = [...allMovies, ...data.results];\r\n        }\r\n\r\n        this.movies = allMovies;\r\n        this.totalPages = Math.ceil(this.movies.length / this.moviesPerPage);\r\n      } catch (error) {\r\n        console.error(\"Error fetching movies:\", error);\r\n      }\r\n    },\r\n    // 페이지 변경\r\n    changePage(page) {\r\n      if (page > 0 && page <= this.totalPages) {\r\n        this.currentPage = page;\r\n      }\r\n    },\r\n    // 화면 크기에 따라 moviesPerPage 계산\r\n    calculateMoviesPerPage() {\r\n      if (window.innerWidth <= 480) {\r\n        return 9; // 모바일: 9개\r\n      } else if (window.innerWidth <= 768) {\r\n        return 6; // 태블릿: 6개\r\n      } else {\r\n        return 10; // 기본: 10개\r\n      }\r\n    },\r\n    // 화면 크기 변화 감지\r\n    handleResize() {\r\n      this.moviesPerPage = this.calculateMoviesPerPage();\r\n      this.totalPages = Math.ceil(this.movies.length / this.moviesPerPage);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 기본 스타일 */\r\n.popular {\r\n  padding-top: 60px; /* 상단 여백 추가 */\r\n  background-color: #000; /* 배경색을 검은색으로 설정 */\r\n  color: #fff; /* 텍스트 흰색 */\r\n  min-height: 100vh; /* 최소 높이 100vh */\r\n}\r\n\r\n.movie-grid {\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr); /* 기본: 5열 */\r\n  gap: 10px;\r\n  padding: 10px;\r\n  justify-items: center;\r\n}\r\n\r\n.movie-card {\r\n  width: 130px;\r\n  text-align: center;\r\n}\r\n\r\n.movie-title {\r\n  font-size: 12px;\r\n}\r\n\r\n/* 반응형 스타일 */\r\n@media (max-width: 768px) {\r\n  .movie-grid {\r\n    grid-template-columns: repeat(3, 1fr); /* 태블릿: 3열 */\r\n    gap: 10px;\r\n  }\r\n\r\n  .movie-card {\r\n    width: 90px; /* 카드 크기 축소 */\r\n  }\r\n\r\n  .movie-title {\r\n    font-size: 11px; /* 제목 글씨 크기 축소 */\r\n  }\r\n}\r\n\r\n@media (max-width: 480px) {\r\n  .movie-grid {\r\n    grid-template-columns: repeat(3, 1fr); /* 모바일: 3열 */\r\n    gap: 8px;\r\n  }\r\n\r\n  .movie-card {\r\n    width: 70px; /* 카드 크기 더 축소 */\r\n  }\r\n\r\n  .movie-title {\r\n    font-size: 0.5px; /* 제목 글씨 크기 더 축소 */\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;EACOA,KAAK,EAAC;AAAS;;EAEbA,KAAK,EAAC;AAAY;;EASlBA,KAAK,EAAC;AAAY;mBAZ3B;mBAAA;;;uBACEC,mBAAA,CA0BM,OA1BNC,UA0BM,GAzBJC,mBAAA,YAAe,EACfC,mBAAA,CAMM,OANNC,UAMM,I,kBALJJ,mBAAA,CAIJK,SAAA,QARFC,WAAA,CAKgBC,QAAA,CAAAC,eAAe,EAAxBC,KAAK;yBADNC,YAAA,CAIJC,oBAAA;MAFDC,GAAG,EAAEH,KAAK,CAACI,EAAE;MACbJ,KAAK,EAAEA;;oCAIJP,mBAAA,YAAe,EACfC,mBAAA,CAcM,OAdNW,UAcM,GAbJX,mBAAA,CAKS;IAJNY,QAAQ,EAAEC,KAAA,CAAAC,WAAW;IACrBC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEb,QAAA,CAAAc,UAAU,CAACL,KAAA,CAAAC,WAAW;KAC/B,QAED,iBAlBNK,UAAA,GAmBMnB,mBAAA,CAAiD,cAAAoB,gBAAA,CAAxCP,KAAA,CAAAC,WAAW,IAAG,KAAG,GAAAM,gBAAA,CAAGP,KAAA,CAAAQ,UAAU,kBACvCrB,mBAAA,CAKS;IAJNY,QAAQ,EAAEC,KAAA,CAAAC,WAAW,KAAKD,KAAA,CAAAQ,UAAU;IACpCN,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEb,QAAA,CAAAc,UAAU,CAACL,KAAA,CAAAC,WAAW;KAC/B,QAED,iBAzBNQ,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}